/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.zoro.kafkapub.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentSent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4315992338024747965L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentSent\",\"namespace\":\"br.com.zoro.kafkapub.avro\",\"fields\":[{\"name\":\"namePayer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of client\"},{\"name\":\"nameReceiver\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of client\"},{\"name\":\"e2e\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"id of payment\"},{\"name\":\"amount\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Value of payment\"},{\"name\":\"situation\",\"type\":\"boolean\",\"doc\":\"Legal situation of payment\",\"default\":false}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentSent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentSent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentSent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentSent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentSent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentSent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentSent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentSent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentSent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Name of client */
  private java.lang.String namePayer;
  /** Name of client */
  private java.lang.String nameReceiver;
  /** id of payment */
  private java.lang.String e2e;
  /** Value of payment */
  private java.lang.String amount;
  /** Legal situation of payment */
  private boolean situation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentSent() {}

  /**
   * All-args constructor.
   * @param namePayer Name of client
   * @param nameReceiver Name of client
   * @param e2e id of payment
   * @param amount Value of payment
   * @param situation Legal situation of payment
   */
  public PaymentSent(java.lang.String namePayer, java.lang.String nameReceiver, java.lang.String e2e, java.lang.String amount, java.lang.Boolean situation) {
    this.namePayer = namePayer;
    this.nameReceiver = nameReceiver;
    this.e2e = e2e;
    this.amount = amount;
    this.situation = situation;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return namePayer;
    case 1: return nameReceiver;
    case 2: return e2e;
    case 3: return amount;
    case 4: return situation;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: namePayer = value$ != null ? value$.toString() : null; break;
    case 1: nameReceiver = value$ != null ? value$.toString() : null; break;
    case 2: e2e = value$ != null ? value$.toString() : null; break;
    case 3: amount = value$ != null ? value$.toString() : null; break;
    case 4: situation = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'namePayer' field.
   * @return Name of client
   */
  public java.lang.String getNamePayer() {
    return namePayer;
  }



  /**
   * Gets the value of the 'nameReceiver' field.
   * @return Name of client
   */
  public java.lang.String getNameReceiver() {
    return nameReceiver;
  }



  /**
   * Gets the value of the 'e2e' field.
   * @return id of payment
   */
  public java.lang.String getE2e() {
    return e2e;
  }



  /**
   * Gets the value of the 'amount' field.
   * @return Value of payment
   */
  public java.lang.String getAmount() {
    return amount;
  }



  /**
   * Gets the value of the 'situation' field.
   * @return Legal situation of payment
   */
  public boolean getSituation() {
    return situation;
  }



  /**
   * Creates a new PaymentSent RecordBuilder.
   * @return A new PaymentSent RecordBuilder
   */
  public static br.com.zoro.kafkapub.avro.PaymentSent.Builder newBuilder() {
    return new br.com.zoro.kafkapub.avro.PaymentSent.Builder();
  }

  /**
   * Creates a new PaymentSent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentSent RecordBuilder
   */
  public static br.com.zoro.kafkapub.avro.PaymentSent.Builder newBuilder(br.com.zoro.kafkapub.avro.PaymentSent.Builder other) {
    if (other == null) {
      return new br.com.zoro.kafkapub.avro.PaymentSent.Builder();
    } else {
      return new br.com.zoro.kafkapub.avro.PaymentSent.Builder(other);
    }
  }

  /**
   * Creates a new PaymentSent RecordBuilder by copying an existing PaymentSent instance.
   * @param other The existing instance to copy.
   * @return A new PaymentSent RecordBuilder
   */
  public static br.com.zoro.kafkapub.avro.PaymentSent.Builder newBuilder(br.com.zoro.kafkapub.avro.PaymentSent other) {
    if (other == null) {
      return new br.com.zoro.kafkapub.avro.PaymentSent.Builder();
    } else {
      return new br.com.zoro.kafkapub.avro.PaymentSent.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentSent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentSent>
    implements org.apache.avro.data.RecordBuilder<PaymentSent> {

    /** Name of client */
    private java.lang.String namePayer;
    /** Name of client */
    private java.lang.String nameReceiver;
    /** id of payment */
    private java.lang.String e2e;
    /** Value of payment */
    private java.lang.String amount;
    /** Legal situation of payment */
    private boolean situation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.zoro.kafkapub.avro.PaymentSent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.namePayer)) {
        this.namePayer = data().deepCopy(fields()[0].schema(), other.namePayer);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nameReceiver)) {
        this.nameReceiver = data().deepCopy(fields()[1].schema(), other.nameReceiver);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.e2e)) {
        this.e2e = data().deepCopy(fields()[2].schema(), other.e2e);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.situation)) {
        this.situation = data().deepCopy(fields()[4].schema(), other.situation);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentSent instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.zoro.kafkapub.avro.PaymentSent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.namePayer)) {
        this.namePayer = data().deepCopy(fields()[0].schema(), other.namePayer);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nameReceiver)) {
        this.nameReceiver = data().deepCopy(fields()[1].schema(), other.nameReceiver);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.e2e)) {
        this.e2e = data().deepCopy(fields()[2].schema(), other.e2e);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.situation)) {
        this.situation = data().deepCopy(fields()[4].schema(), other.situation);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'namePayer' field.
      * Name of client
      * @return The value.
      */
    public java.lang.String getNamePayer() {
      return namePayer;
    }


    /**
      * Sets the value of the 'namePayer' field.
      * Name of client
      * @param value The value of 'namePayer'.
      * @return This builder.
      */
    public br.com.zoro.kafkapub.avro.PaymentSent.Builder setNamePayer(java.lang.String value) {
      validate(fields()[0], value);
      this.namePayer = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'namePayer' field has been set.
      * Name of client
      * @return True if the 'namePayer' field has been set, false otherwise.
      */
    public boolean hasNamePayer() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'namePayer' field.
      * Name of client
      * @return This builder.
      */
    public br.com.zoro.kafkapub.avro.PaymentSent.Builder clearNamePayer() {
      namePayer = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nameReceiver' field.
      * Name of client
      * @return The value.
      */
    public java.lang.String getNameReceiver() {
      return nameReceiver;
    }


    /**
      * Sets the value of the 'nameReceiver' field.
      * Name of client
      * @param value The value of 'nameReceiver'.
      * @return This builder.
      */
    public br.com.zoro.kafkapub.avro.PaymentSent.Builder setNameReceiver(java.lang.String value) {
      validate(fields()[1], value);
      this.nameReceiver = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nameReceiver' field has been set.
      * Name of client
      * @return True if the 'nameReceiver' field has been set, false otherwise.
      */
    public boolean hasNameReceiver() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nameReceiver' field.
      * Name of client
      * @return This builder.
      */
    public br.com.zoro.kafkapub.avro.PaymentSent.Builder clearNameReceiver() {
      nameReceiver = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'e2e' field.
      * id of payment
      * @return The value.
      */
    public java.lang.String getE2e() {
      return e2e;
    }


    /**
      * Sets the value of the 'e2e' field.
      * id of payment
      * @param value The value of 'e2e'.
      * @return This builder.
      */
    public br.com.zoro.kafkapub.avro.PaymentSent.Builder setE2e(java.lang.String value) {
      validate(fields()[2], value);
      this.e2e = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'e2e' field has been set.
      * id of payment
      * @return True if the 'e2e' field has been set, false otherwise.
      */
    public boolean hasE2e() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'e2e' field.
      * id of payment
      * @return This builder.
      */
    public br.com.zoro.kafkapub.avro.PaymentSent.Builder clearE2e() {
      e2e = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Value of payment
      * @return The value.
      */
    public java.lang.String getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * Value of payment
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public br.com.zoro.kafkapub.avro.PaymentSent.Builder setAmount(java.lang.String value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Value of payment
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * Value of payment
      * @return This builder.
      */
    public br.com.zoro.kafkapub.avro.PaymentSent.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'situation' field.
      * Legal situation of payment
      * @return The value.
      */
    public boolean getSituation() {
      return situation;
    }


    /**
      * Sets the value of the 'situation' field.
      * Legal situation of payment
      * @param value The value of 'situation'.
      * @return This builder.
      */
    public br.com.zoro.kafkapub.avro.PaymentSent.Builder setSituation(boolean value) {
      validate(fields()[4], value);
      this.situation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'situation' field has been set.
      * Legal situation of payment
      * @return True if the 'situation' field has been set, false otherwise.
      */
    public boolean hasSituation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'situation' field.
      * Legal situation of payment
      * @return This builder.
      */
    public br.com.zoro.kafkapub.avro.PaymentSent.Builder clearSituation() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentSent build() {
      try {
        PaymentSent record = new PaymentSent();
        record.namePayer = fieldSetFlags()[0] ? this.namePayer : (java.lang.String) defaultValue(fields()[0]);
        record.nameReceiver = fieldSetFlags()[1] ? this.nameReceiver : (java.lang.String) defaultValue(fields()[1]);
        record.e2e = fieldSetFlags()[2] ? this.e2e : (java.lang.String) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.lang.String) defaultValue(fields()[3]);
        record.situation = fieldSetFlags()[4] ? this.situation : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentSent>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentSent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentSent>
    READER$ = (org.apache.avro.io.DatumReader<PaymentSent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.namePayer);

    out.writeString(this.nameReceiver);

    out.writeString(this.e2e);

    out.writeString(this.amount);

    out.writeBoolean(this.situation);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.namePayer = in.readString();

      this.nameReceiver = in.readString();

      this.e2e = in.readString();

      this.amount = in.readString();

      this.situation = in.readBoolean();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.namePayer = in.readString();
          break;

        case 1:
          this.nameReceiver = in.readString();
          break;

        case 2:
          this.e2e = in.readString();
          break;

        case 3:
          this.amount = in.readString();
          break;

        case 4:
          this.situation = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










